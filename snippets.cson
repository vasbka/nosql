# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.js':
  'arrow function':
    'prefix': 'ff'
    'body': '$1 = ($3) => {$2}'
  'then data arrow function':
    'prefix': 'tda'
    'body': """
      .then(($1) => {
        $2
      })
    """

  'fast fetch post':
    'prefix': 'ffp'
    'body': """
      fetch("/$1", {
        method: "POST"
      });
    """

  'First rows':
    'prefix': 'fs'
    'body': """
      import React, { Component } from 'react';
      import './$1.css';
    """

  'Fast init component':
    'prefix':'fic'
    'body': """
      class $1 extends Component {
        constructor() {
          super();
          this.state = {
            $2
          }
        }

        render() {
          return (
            <div>

            </div>
          );
        }
      }
    """

  'Init db mehtod':
    'prefix': 'dbmg'
    'body': """
      router.get('/$1', (req, res, next) => {
        try {
          var resl = pool.query('$2');
        } catch(err) {
          throw new Error(err);
        }
        res.status($3).json({
        });
      });
    """

  'Create table':
    'prefix': 'ct'
    'body': """
      CREATE TABLE $1 (
        id INT NOT NULL,
        ${2}
      )
    """

  'Varchar with size of 255':
    'prefix': 'vr'
    'body': 'varchar(255)'

  'Not null':
    'prefix': 'nn'
    'body': 'NOT NULL'
